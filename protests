import numpy as np
import math
from scipy.integrate import solve_ivp
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from scipy.optimize import differential_evolution


class model_main:
    def __init__(self, t_F, n_steps):
        self.t_F = t_F
        self.n_steps = n_steps
    def F_(self, t, X, q):
        F = np.zeros_like(X)
        F[0] = - (q[0]) * (X[0] * X[1]) - q[1] *(X[0] * X[2])
        F[1] = (q[0]) * (X[0] * X[1]) + q[1] * (X[0] * X[2]) - q[5] * X[1] - q[2] * X[1]
        F[2] = (q[2]) * X[1] - X[2] * (q[6] + (q[5]-q[6]) * ((q[4] ** q[3]) / ((X[2] + X[1]) ** q[3] + q[4] ** q[3])))
        F[3] = q[5] * X[1] + X[2] * (q[6] + (q[5]-q[6]) * ((q[4] ** q[3]) / ((X[2] + X[1]) ** q[3] + q[4] ** q[3])))
        return F
    
dataF = [288.0, 166.0, 136.0, 126.0, 66.0, 39.0, 32.0, 50.0,
         84.0, 69.0, 58.6, 51.4, 41.5, 46.6, 39.3,
         28.6, 32.3, 40.5, 33.7, 22.3, 31.0, 27.9, 23.6, 164.4, 18.9, 18.6, 15.5, 
         12.5, 9.5, 10.3, 7.0, 11.8, 5.8, 0]
timeF = [7, 14, 21, 28, 35, 42, 56, 63, 70, 77, 85, 91, 98, 
         105, 112, 119, 126, 133, 140, 147, 154, 161, 168,
         172, 174, 181, 189, 196, 203, 210, 217, 224, 231, 266]
dataFtest = [288.0, 166.0, 136.0, 126.0, 66.0, 39.0, 32.0, 50.0,
         84.0, 69.0, 58.6, 51.4, 41.5, 46.6, 39.3,
         28.6, 32.3, 40.5, 33.7, 22.3, 31.0, 27.9, 23.6, 18.9, 18.6, 15.5, 
         12.5, 9.5, 10.3, 7.0, 11.8, 5.8, 0]
timeFtest = [7, 14, 21, 28, 35, 42, 56, 63, 70, 77, 85, 91, 98, 
         105, 112, 119, 126, 133, 140, 147, 154, 161, 168,
         174, 181, 189, 196, 203, 210, 217, 224, 231, 266]
dataH = [12000, 10000, 6500, 3500, 2800, 1200, 1500,
         1200, 1000, 600, 500, 500, 700, 300, 200, 250,
         200, 150, 80, 30, 0]
timeH = [7, 14, 21, 28, 35, 42, 49, 56, 63,
        77, 84, 98, 112, 119, 126, 133, 140, 154, 161,
        175, 182]

for i in range(len(timeFtest)):
    timeFtest[i] =  timeFtest[i] - 7
    dataFtest[i] = dataFtest[i]*1000
for i in range(len(timeF)):
    timeF[i] =  timeF[i] - 7
    dataF[i] = dataF[i]*1000
for i in range(len(timeH)):
    timeH[i] =  timeH[i] - 7
    
def solve_ODE(model,q):
    X0= [55212000, 288000, 0.0, 0.0]
    #X0= [604000, 12000 , 0.0, 0.0]
    tt = np.linspace(0,model.t_F, n_steps)
    sol = solve_ivp(model.F_, t_span=[0,model.t_F], y0=X0, method='RK45', max_step=0.1, t_eval = tt, args=(q,), dense_output=True)
    return sol.y

def plot_solution(model, sol, data, time):
    tt = np.linspace(0,model.t_F, n_steps)
    X0 = sol[0,:]
    X1 = sol[1,:]
    X2 = sol[2,:]
    X3 = sol[3,:]
    plt.figure(num=None, figsize=(6, 4), dpi=150, facecolor='w', edgecolor='k')
    plt.plot(time, data,linestyle='',marker='d', markerfacecolor='w', c = 'k', ms ='5.5', mew = '0.6',label='Data')
    #plt.plot(tt, X0, 'r--', label='$S(t)$')
    plt.plot(tt, X1, 'b--',linewidth = 1.3, label='$I(t)$')
    plt.plot(tt, X2, 'g--',linewidth = 1.3, label='$C(t)$')
    #plt.plot(tt, X3, 'k--',linewidth = 1.3, label='$R(t)$')
    plt.plot(tt, X1 + X2, 'k',linewidth = 1.3, label='$I(t)+C(t)$')
    plt.legend(loc='upper right')
    plt.xlabel('Time (days)')
    plt.ylabel('No. of people (thousands)')
    plt.grid()
    plt.show()


def cost_func1(q, model, data, time):
    sol_ode = solve_ODE(model,q)
    J = 0.0
    for i in range(len(data)):
        J = J + abs(sol_ode[1, time[i]] + sol_ode[2, time[i]] - data[i])
    return J     
    
def cost_func2(q, model, data, time):
    sol_ode = solve_ODE(model,q)
    J = 0.0
    for i in range(len(data)):
        J = J + (sol_ode[1, time[i]] + sol_ode[2, time[i]]  - data[i]) ** 2
    return J

def dif_eval(bounds, model, data, time):
    result_difEv = differential_evolution(cost_func2, bounds=bounds, args=(model, data, time))
    q_res = result_difEv.x
    res = result_difEv.fun
    print(q_res, res)
    sol = solve_ODE(model, q_res)
    plot_solution(model, sol, data, time)
    
n_steps = 281
t_F = 280
#n_steps = 183
#t_F = 182

boundsF = [(0.0000000001 ,1), (0.0000000001, 1), (0.0000000001, 1), (1, 5), (25000, 25000), (0.0000000001, 1),(0.0000000001, 1)]
boundsH = [(0.09, 0.3), (0.0001, 1), (0.0001, 1), (1., 10.), (10, 150), (0.1, 1),(0.0001, 1)]

model = model_main(t_F, n_steps)
dif_eval(boundsF, model, dataFtest, timeFtest)
